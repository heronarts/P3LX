<project name="P3LX" default="jar" basedir="../">

	<property file="./build/build.properties" />

	<description>
    	This is used to build the P3LX project. Requires a local copy of the LX project in adjacent folder.
  	</description>

	<property name="line" value="------------------------------------------------------------------------------------------------" />

	<!-- set the OS properties -->
	<condition property="is.mac">
		<os family="mac" />
	</condition>
	<condition property="is.windows">
		<os family="windows" />
	</condition>
	<condition property="is.unix">
		<os family="unix" />
	</condition>

	<property name="project.jar.name" value="${project.name}.jar" />
	<property name="project.src.lx" location="../LX/src/main/java" />
	<property name="project.lib" location="../LX/lib" />
	<property name="project.src.p3lx" location="src/main/java" />
	<property name="project.tmp" location="tmp" />
	<property name="project.resources" location="src/main/resources" />
	<property name="project.data" location="${project.resources}/data" />
	<property name="project.bin" location="bin" />
	<property name="project.bin.data" location="${project.bin}/data" />
	<property name="project.reference" location="reference" />
	<property name="project.dist" location="distribution" />
	<property name="project.dist.version" location="distribution/${project.name}-${library.version}" />
	<property name="libprops.source" location="build/library.properties" />

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="./build/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<path id="classpath">
		<fileset dir="${classpath.local.location}" includes="${classpath.local.include}" />
		<fileset dir="${project.lib}" includes="**/*.jar" />
	</path>

	<!-- Create the time stamp -->
	<tstamp>
		<format property="date" pattern="MM/dd/yyyy" offset="0" unit="hour" />
	</tstamp>

	<target name="library.init">
		<echo>${line}
    Building the Processing library ${project.name} ${library.version}
${line}
	lx src path     ${project.src.lx}
	p3lx src path   ${project.src.p3lx}
	bin path        ${project.bin}
	classpath.local	${classpath.local.location}
	sketchbook      ${sketchbook.location}
	java version    ${java.target.version}
${line}
		</echo>

		<mkdir dir="${project.bin}" />
	</target>

	<target name="library.run" depends="library.init">
		<echo message="building library ..." />
		<antcall target="generate.structure">
			<param name="folder" value="library" />
		</antcall>
		<antcall target="jar" />
		<antcall target="generate.source" />
		<antcall target="generate.jar">
			<param name="folder" value="library" />
		</antcall>
		<antcall target="generate.javadoc" />
		<antcall target="copyToSketchbook">
			<param name="folder" value="libraries" />
		</antcall>
		<antcall target="generate.libprops" />
		<antcall target="generate.distribution" />
		<antcall target="generate.zip" />
		<delete dir="${project.tmp}" />
	</target>

	<target name="generate.libprops">
		<property name="libprops.destination" location="${project.tmp}/${project.name}/library.properties" />
		<copy file="${libprops.source}" tofile="${libprops.destination}" />
		<antcall target="parse.file">
			<param name="file" value="${libprops.destination}" />
		</antcall>
	</target>

	<target name="copyToSketchbook">
		<echo message="Copying files to the ${folder} folder in your sketchbook." />
		<!-- copy the jar file to processing's sketchbook libraries folder -->
		<delete dir="${sketchbook.location}/${folder}/${project.name}" />
		<mkdir dir="${sketchbook.location}/${folder}/${project.name}" />
		<copy todir="${sketchbook.location}/${folder}/${project.name}">
			<fileset dir="${project.tmp}/${project.name}" />
		</copy>
	</target>

	<target name="compile">
		<javac srcdir="${project.tmp}/${project.name}/src" destdir="${project.bin}" source="${java.target.version}" target="${java.target.version}" includeantruntime="false">
			<classpath>
				<path refid="classpath" />
			</classpath>
			<compilerarg value="-Xlint" />
		</javac>
		<copy todir="${project.bin.data}">
			<fileset dir="${project.data}" />
		</copy>
	</target>

	<target name="generate.jar" depends="jar">
		<copy file="${project.bin}/${project.jar.name}" todir="${project.tmp}/${project.name}/${folder}" />
	</target>

	<target name="generate.structure">
		<delete dir="${project.tmp}" />
		<mkdir dir="${project.tmp}" />
		<mkdir dir="${project.tmp}/${project.name}" />
		<mkdir dir="${project.tmp}/${project.name}/${folder}" />
		<mkdir dir="${project.tmp}/${project.name}/reference" />
		<mkdir dir="${project.tmp}/${project.name}/src" />
		<copy todir="${project.tmp}/${project.name}/src">
			<fileset dir="${project.src.p3lx}" />
			<fileset dir="${project.src.lx}" />
		</copy>
		<copy todir="${project.tmp}/${project.name}/${folder}">
			<fileset dir="${project.lib}" excludes="README" />
		</copy>
	</target>

	<target name="generate.source">
		<antcall target="generate.source.win" />
		<antcall target="generate.source.nix" />
	</target>

	<!-- These two targets are pretty much the same, except for the delimiter (can't find a better way of doing this) -->
	<target name="generate.source.win" if="is.windows">
		<echo message="generating source (windows) ..." />
		<path id="src.contents">
			<fileset dir="${project.tmp}\${project.name}\src" includes="**\*.java" />
		</path>
		<property name="src.list" refid="src.contents" />
		<foreach list="${src.list}" param="file" target="parse.file" delimiter=";" />
	</target>
	<target name="generate.source.nix" unless="is.windows">
		<echo message="generating source (mac/linux) ..." />
		<path id="src.contents">
			<fileset dir="${project.tmp}/${project.name}/src" includes="**/*.java" />
		</path>
		<property name="src.list" refid="src.contents" />
		<foreach list="${src.list}" param="file" target="parse.file" delimiter=":" />
	</target>

	<target name="generate.distribution">
		<mkdir dir="${project.dist}" />
		<delete dir="${project.dist.version}" />
		<mkdir dir="${project.dist.version}" />
		<mkdir dir="${project.dist.version}/${project.name}" />
		<move file="${project.tmp}/${project.name}" toDir="${project.dist.version}" />
	</target>

	<target name="generate.javadoc">
		<!-- create the java reference of the library -->
		<javadoc bottom="Processing library ${project.name} by ${author.name}. ${library.copyright}" classpath="${classpath.local.location}/core-3.3.7.jar;${classpath.local.location}/jogl-all-2.3.2.jar;${project.lib}/coremidi4j-1.4.jar;${project.lib}/gson-2.8.0.jar;{project.bin}" destdir="${project.tmp}/${project.name}/reference" verbose="false" stylesheetfile="build/stylesheet.css" doctitle="${project.name} API Specification" version="false" windowtitle="${project.name} API">

			<link href="${javadoc.java.href}" />
			<link href="${javadoc.processing.href}" />
			<link href="${javadoc.gson.href}" offline="true" packagelistLoc="build" />
			<fileset dir="${project.tmp}/${project.name}/src" defaultexcludes="yes">
				<!-- add packages to be added to reference. -->
				<include name="**/*" />
			</fileset>
		</javadoc>
	</target>

	<!-- find and replace ##placeholder## keywords in a file -->
	<target name="parse.file">
		<echo message="${file}" />

		<replaceregexp file="${file}" match="##date##" replace="${date}" flags="g" />
		<replaceregexp file="${file}" match="##copyright##" replace="${library.copyright}" flags="g" />

		<replaceregexp file="${file}" match="##author##" replace="${author.name} ${author.url}" flags="g" />
		<replaceregexp file="${file}" match="##author.name##" replace="${author.name}" flags="g" />
		<replaceregexp file="${file}" match="##author.url##" replace="${author.url}" flags="g" />

		<replaceregexp file="${file}" match="##library.name##" replace="${project.name}" flags="g" />
		<replaceregexp file="${file}" match="##project.name##" replace="${project.name}" flags="g" />

		<replaceregexp file="${file}" match="##library.version##" replace="${library.version}" flags="g" />
		<replaceregexp file="${file}" match="##library.prettyVersion##" replace="${library.prettyVersion}" flags="g" />

		<replaceregexp file="${file}" match="##library.url##" replace="${library.url}" flags="g" />
		<replaceregexp file="${file}" match="##library.category##" replace="${library.category}" flags="g" />
		<replaceregexp file="${file}" match="##library.sentence##" replace="${library.sentence}" flags="g" />
		<replaceregexp file="${file}" match="##library.paragraph##" replace="${library.paragraph}" flags="g" />
		<replaceregexp file="${file}" match="##library.keywords##" replace="${library.keywords}" flags="g" />
		<replaceregexp file="${file}" match="##library.dependencies##" replace="${library.dependencies}" flags="g" />

		<replaceregexp file="${file}" match="##source.host##" replace="${source.host}" flags="g" />
		<replaceregexp file="${file}" match="##source.url##" replace="${source.url}" flags="g" />
		<replaceregexp file="${file}" match="##source.repository##" replace="${source.repository}" flags="g" />

		<replaceregexp file="${file}" match="##tested.platform##" replace="${tested.platform}" flags="g" />
		<replaceregexp file="${file}" match="##tested.processingVersion##" replace="${tested.processingVersion}" flags="g" />
	</target>

	<target name="generate.zip">
		<!-- zip the distribution of the library -->
		<move todir="${project.dist.version}/tmp/${project.name}-${library.version}">
			<fileset dir="${project.dist.version}/${project.name}" />
		</move>

		<zip destfile="${project.dist.version}/${project.name}-${library.version}.zip" basedir="${project.dist.version}/tmp/${project.name}-${library.version}" excludes="**/.DS_Store" />

		<delete dir="${project.dist.version}/tmp" />
	</target>

	<target name="jar">
		<delete file="${project.bin}/${project.jar.name}" />
		<mkdir dir="${project.bin}" />
		<javac destdir="${project.bin}" source="${java.target.version}" target="${java.target.version}" includeantruntime="false">
			<src path="${project.src.lx}" />
			<src path="${project.src.p3lx}" />
			<classpath>
				<path refid="classpath" />
			</classpath>
			<compilerarg value="-Xlint" />
		</javac>
		<jar jarfile="${project.bin}/${project.jar.name}" basedir="${project.bin}">
			<fileset dir="${basedir}" includes="LICENSE VERSION" />
			<fileset dir="${project.resources}" includes="data/**" />
			<zipgroupfileset dir="${project.lib}" includes="coremidi4j-1.4.jar" />
			<zipgroupfileset dir="${project.lib}" includes="gson-2.8.6.jar" />
		</jar>
	</target>

	<target name="library">
		<antcall target="clean" />
		<antcall target="library.run" />
		<echo>
		
${line}
Name        ${project.name} 
Version     ${library.prettyVersion} (${library.version})
Sketchbook  ${sketchbook.location}
${line}
done, finished.
${line}
		</echo>
	</target>
	
	<target name="clean">
		<delete dir="${project.bin}" />
		<delete dir="${project.tmp}" />
	</target>

</project>

